{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x051e48293136fa62ef6f8e816eb67154da688dc1d44b562b43f665ab211542eb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2661814",
    "logsBloom": "0x
    "blockHash": "0xbb971c91a20251fc604c8dfbac74670a9d0b0d96663949af18eba8139aa3d1e3",
    "transactionHash": "0x051e48293136fa62ef6f8e816eb67154da688dc1d44b562b43f665ab211542eb",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2661814",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "2f8839b2840a46584fe6931acb327eda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract UniswapV2ERC20 {\\n    using SafeMathUniswap for uint256;\\n\\n    string public constant name = \\\"SushiSwap LP Token\\\";\\n    string public constant symbol = \\\"SLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"UniswapV2: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x153c8d6edd49b1e4101f5c282862dc5f4cac5e659c71c5ff201580e74d533dc2\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public override migrator;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(UniswapV2Pair).creationCode);\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"UniswapV2: PAIR_EXISTS\\\"); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        UniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setMigrator(address _migrator) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        migrator = _migrator;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0x0368d5b87059a322683524dc3d3b1fbceae7bc8bacdd1ef03218db92c1ce7a40\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UniswapV2ERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20Uniswap.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract UniswapV2Pair is UniswapV2ERC20 {\\n    using SafeMathUniswap for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"UniswapV2: TRANSFER_FAILED\\\");\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"UniswapV2: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20Uniswap(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IUniswapV2Factory(factory).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != type(uint256).max, \\\"Bad desired liquidity\\\");\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n            balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                \\\"UniswapV2: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20Uniswap(token0).balanceOf(address(this)),\\n            IERC20Uniswap(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdd1bd41a3fb78fe536a8bdcebc8b965700b7f618e176094326ee3125dd72e361\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/interfaces/IERC20Uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Uniswap {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6f3a82e918a08f482f025c9207dd6b450c02e4727f7121ba775ae0aa4874daf2\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf3c597b1008293188bc1faa25cc1e4ca534127bd860526559a89f47ae5a289ef\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x196792bd53434bfb6d8cefdef192d968f8252372bae94a175d2bc388c797e6c2\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6775ea80b082afd5a04df9d2ba996aadba42095b6249c20aeecd8f25321a18c5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Uniswap/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x481e3fafc1acdf5847af36eba2d9f97431c47fbff573896ec8e075b7897009ab\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x2db53bcb233bf87518e27895a85c6a8d0c7116d98ac9eb4ac32d78bf5876db9e\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612f6b380380612f6b83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b612ed8806100936000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80637cd07e4711610081578063c9c653961161005b578063c9c6539614610179578063e6a439051461018c578063f46901ed146101c057600080fd5b80637cd07e471461014b5780639aab92481461015e578063a2e74af61461016657600080fd5b80631e3dd18b116100b25780631e3dd18b1461011157806323cf311814610124578063574f2ba31461013957600080fd5b8063017e7e58146100ce578063094b7415146100fe575b600080fd5b6000546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100e1906001600160a01b031681565b6100e161011f366004610707565b6101d3565b61013761013236600461073c565b6101fd565b005b6004545b6040519081526020016100f5565b6002546100e1906001600160a01b031681565b61013d61028b565b61013761017436600461073c565b6102bd565b6100e161018736600461075e565b610346565b6100e161019a36600461075e565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6101376101ce36600461073c565b610671565b600481815481106101e357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461025c5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e00000000000000000000000060448201526064015b60405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006040518060200161029d906106fa565b6020820181038252601f19601f8201166040525080519060200120905090565b6001546001600160a01b031633146103175760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e0000000000000000000000006044820152606401610253565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316036103a95760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f41444452455353455300006044820152606401610253565b600080836001600160a01b0316856001600160a01b0316106103cc5783856103cf565b84845b90925090506001600160a01b03821661042a5760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f414444524553530000000000000000006044820152606401610253565b6001600160a01b0382811660009081526003602090815260408083208585168452909152902054161561049f5760405162461bcd60e51b815260206004820152601660248201527f556e697377617056323a20504149525f455849535453000000000000000000006044820152606401610253565b6000604051806020016104b1906106fa565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f56040517f485cc9550000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146106cb5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e0000000000000000000000006044820152606401610253565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6127118061079283390190565b60006020828403121561071957600080fd5b5035919050565b80356001600160a01b038116811461073757600080fd5b919050565b60006020828403121561074e57600080fd5b61075782610720565b9392505050565b6000806040838503121561077157600080fd5b61077a83610720565b915061078860208401610720565b9050925092905056fe60806040526001600c5534801561001557600080fd5b50604080518082018252601281527129bab9b434a9bbb0b8102628102a37b5b2b760711b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fefbffe65652a145845c9bc8d0532945be6b9830fe1e9966c887bd298e551ac83818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055612601806101106000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610449578063d505accf1461045c578063dd62ed3e1461046f578063fff6cae91461049a57600080fd5b8063ba9a7a561461041a578063bc25cf7714610423578063c45a01551461043657600080fd5b80637ecebe00116100d35780637ecebe001461038357806389afcb44146103a357806395d89b41146103cb578063a9059cbb1461040757600080fd5b80636a6278421461034757806370a082311461035a5780637464fc3d1461037a57600080fd5b806323b872dd116101665780633644e515116101405780633644e51514610319578063485cc955146103225780635909c0d5146103355780635a3d54931461033e57600080fd5b806323b872dd146102c557806330adf81f146102d8578063313ce567146102ff57600080fd5b8063095ea7b311610197578063095ea7b3146102605780630dfe16811461028357806318160ddd146102ae57600080fd5b8063022c0d9f146101be57806306fdde03146101d35780630902f1ac14610225575b600080fd5b6101d16101cc3660046121bd565b6104a2565b005b61020f6040518060400160405280601281526020017f537573686953776170204c5020546f6b656e000000000000000000000000000081525081565b60405161021c9190612277565b60405180910390f35b600854604080516001600160701b038084168252600160701b8404166020820152600160e01b90920463ffffffff169082015260600161021c565b61027361026e3660046122aa565b610a6d565b604051901515815260200161021c565b600654610296906001600160a01b031681565b6040516001600160a01b03909116815260200161021c565b6102b760005481565b60405190815260200161021c565b6102736102d33660046122d6565b610a84565b6102b77f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610307601281565b60405160ff909116815260200161021c565b6102b760035481565b6101d1610330366004612317565b610b18565b6102b760095481565b6102b7600a5481565b6102b7610355366004612350565b610bb8565b6102b7610368366004612350565b60016020526000908152604090205481565b6102b7600b5481565b6102b7610391366004612350565b60046020526000908152604090205481565b6103b66103b1366004612350565b61107d565b6040805192835260208301919091520161021c565b61020f6040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102736104153660046122aa565b61142c565b6102b76103e881565b6101d1610431366004612350565b611439565b600554610296906001600160a01b031681565b600754610296906001600160a01b031681565b6101d161046a36600461236d565b611571565b6102b761047d366004612317565b600260209081526000928352604080842090915290825290205481565b6101d16117ab565b600c546001146104ed5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064015b60405180910390fd5b6000600c55841515806105005750600084115b6105725760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f4160448201527f4d4f554e5400000000000000000000000000000000000000000000000000000060648201526084016104e4565b6000806105a36008546001600160701b0380821692600160701b83049091169163ffffffff600160e01b9091041690565b5091509150816001600160701b0316871080156105c85750806001600160701b031686105b61063a5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f590000000000000000000000000000000000000000000000000000000000000060648201526084016104e4565b60065460075460009182916001600160a01b039182169190811690891682148015906106785750806001600160a01b0316896001600160a01b031614155b6106c45760405162461bcd60e51b815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f000000000000000000000060448201526064016104e4565b8a156106d5576106d5828a8d6118f3565b89156106e6576106e6818a8c6118f3565b861561076c576040517f10d1e85c0000000000000000000000000000000000000000000000000000000081526001600160a01b038a16906310d1e85c906107399033908f908f908e908e906004016123e4565b600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190612431565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190612431565b92505050600089856001600160701b031661085a9190612460565b8311610867576000610884565b61087a8a6001600160701b038716612460565b6108849084612460565b9050600061089b8a6001600160701b038716612460565b83116108a85760006108c5565b6108bb8a6001600160701b038716612460565b6108c59084612460565b905060008211806108d65750600081115b6109475760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201527f4f554e540000000000000000000000000000000000000000000000000000000060648201526084016104e4565b6000610969610957846003611a57565b610963876103e8611a57565b90611ac7565b9050600061097b610957846003611a57565b90506109a0620f424061099a6001600160701b038b8116908b16611a57565b90611a57565b6109aa8383611a57565b10156109f85760405162461bcd60e51b815260206004820152600c60248201527f556e697377617056323a204b000000000000000000000000000000000000000060448201526064016104e4565b5050610a0684848888611b25565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6000610a7a338484611d33565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610b03576001600160a01b0384166000908152600260209081526040808320338452909152902054610ade9083611ac7565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610b0e848484611d95565b5060019392505050565b6005546001600160a01b03163314610b725760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e00000000000000000000000060448201526064016104e4565b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b6000600c54600114610c005760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c819055600854600654604080516370a0823160e01b815230600482015290516001600160701b0380851695600160701b9095041693926001600160a01b0316916370a082319160248083019260209291908290030181865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190612431565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d049190612431565b90506000610d1b836001600160701b038716611ac7565b90506000610d32836001600160701b038716611ac7565b90506000610d408787611e3b565b60008054919250819003610f3257600554604080517f7cd07e4700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691637cd07e479160048083019260209291908290030181865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190612473565b90506001600160a01b0381163303610eae57806001600160a01b03166340dc0e376040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190612431565b995060008a118015610e5d57506000198a14155b610ea95760405162461bcd60e51b815260206004820152601560248201527f4261642064657369726564206c6971756964697479000000000000000000000060448201526064016104e4565b610f2c565b6001600160a01b03811615610f055760405162461bcd60e51b815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f720000000000000000000060448201526064016104e4565b610f1d6103e8610963610f188888611a57565b611f78565b9950610f2c60006103e8611fe8565b50610f79565b610f766001600160701b038916610f498684611a57565b610f5391906124a6565b6001600160701b038916610f678685611a57565b610f7191906124a6565b612077565b98505b60008911610fef5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4d494e54454400000000000000000000000000000000000000000000000060648201526084016104e4565b610ff98a8a611fe8565b61100586868a8a611b25565b811561102f5760085461102b906001600160701b0380821691600160701b900416611a57565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c546001146110c65760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c819055600854600654600754604080516370a0823160e01b815230600482015290516001600160701b0380861696600160701b90960416946001600160a01b0394851694909316929184916370a08231916024808201926020929091908290030181865afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190612431565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612431565b306000908152600160205260408120549192506111ef8888611e3b565b600054909150806112008487611a57565b61120a91906124a6565b9a50806112178486611a57565b61122191906124a6565b995060008b118015611233575060008a115b6112a55760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4255524e454400000000000000000000000000000000000000000000000060648201526084016104e4565b6112af308461208f565b6112ba878d8d6118f3565b6112c5868d8c6118f3565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190612431565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113989190612431565b93506113a685858b8b611b25565b81156113d0576008546113cc906001600160701b0380821691600160701b900416611a57565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b6000610a7a338484611d95565b600c5460011461147f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b03938416939092169161151a9184918691611515916001600160701b039091169084906370a08231906024015b602060405180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612431565b6118f3565b6008546040516370a0823160e01b8152306004820152611567918391869161151591600160701b9091046001600160701b0316906001600160a01b038516906370a08231906024016114d4565b50506001600c5550565b428410156115c15760405162461bcd60e51b815260206004820152601260248201527f556e697377617056323a2045585049524544000000000000000000000000000060448201526064016104e4565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b919087611614836124ba565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016116a89291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611713573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117495750886001600160a01b0316816001600160a01b0316145b6117955760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e41545552450000000060448201526064016104e4565b6117a0898989611d33565b505050505050505050565b600c546001146117f15760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c556006546040516370a0823160e01b81523060048201526118ec916001600160a01b0316906370a0823190602401602060405180830381865afa158015611840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118649190612431565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d09190612431565b6008546001600160701b0380821691600160701b900416611b25565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839287169161199891906124d3565b6000604051808303816000865af19150503d80600081146119d5576040519150601f19603f3d011682016040523d82523d6000602084013e6119da565b606091505b5091509150818015611a04575080511580611a04575080806020019051810190611a0491906124ef565b611a505760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c454400000000000060448201526064016104e4565b5050505050565b6000811580611a7b57508282611a6d8183612511565b9250611a7990836124a6565b145b610a7e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f7700000000000000000000000060448201526064016104e4565b600082611ad48382612460565b9150811115610a7e5760405162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000060448201526064016104e4565b6001600160701b038411801590611b4357506001600160701b038311155b611b8f5760405162461bcd60e51b815260206004820152601360248201527f556e697377617056323a204f564552464c4f570000000000000000000000000060448201526064016104e4565b6000611ba064010000000042612528565b600854909150600090611bc090600160e01b900463ffffffff168361253c565b905060008163ffffffff16118015611be057506001600160701b03841615155b8015611bf457506001600160701b03831615155b15611c83578063ffffffff16611c1c85611c0d86612119565b6001600160e01b031690612132565b6001600160e01b0316611c2f9190612511565b60096000828254611c409190612560565b909155505063ffffffff8116611c5984611c0d87612119565b6001600160e01b0316611c6c9190612511565b600a6000828254611c7d9190612560565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081027fffffffff000000000000000000000000000000000000000000000000000000009095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611db89082611ac7565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611de79082612147565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611d889085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190612473565b600b546001600160a01b038216158015945091925090611f64578015611f5f576000611ef0610f186001600160701b03888116908816611a57565b90506000611efd83611f78565b905080821115611f5c576000611f1f611f168484611ac7565b60005490611a57565b90506000611f3883611f32866005611a57565b90612147565b90506000611f4682846124a6565b90508015611f5857611f588782611fe8565b5050505b50505b611f70565b8015611f70576000600b555b505092915050565b60006003821115611fd95750806000611f926002836124a6565b611f9d906001612560565b90505b81811015611fd357905080600281611fb881866124a6565b611fc29190612560565b611fcc91906124a6565b9050611fa0565b50919050565b8115611fe3575060015b919050565b600054611ff59082612147565b60009081556001600160a01b03831681526001602052604090205461201a9082612147565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061206b9085815260200190565b60405180910390a35050565b60008183106120865781612088565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546120b29082611ac7565b6001600160a01b038316600090815260016020526040812091909155546120d99082611ac7565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161206b565b6000610a7e600160701b6001600160701b038416612573565b60006120886001600160701b038316846125a5565b6000826121548382612560565b9150811015610a7e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016104e4565b6001600160a01b03811681146121ba57600080fd5b50565b6000806000806000608086880312156121d557600080fd5b853594506020860135935060408601356121ee816121a5565b9250606086013567ffffffffffffffff8082111561220b57600080fd5b818801915088601f83011261221f57600080fd5b81358181111561222e57600080fd5b89602082850101111561224057600080fd5b9699959850939650602001949392505050565b60005b8381101561226e578181015183820152602001612256565b50506000910152565b6020815260008251806020840152612296816040850160208701612253565b601f01601f19169190910160400192915050565b600080604083850312156122bd57600080fd5b82356122c8816121a5565b946020939093013593505050565b6000806000606084860312156122eb57600080fd5b83356122f6816121a5565b92506020840135612306816121a5565b929592945050506040919091013590565b6000806040838503121561232a57600080fd5b8235612335816121a5565b91506020830135612345816121a5565b809150509250929050565b60006020828403121561236257600080fd5b8135612088816121a5565b600080600080600080600060e0888a03121561238857600080fd5b8735612393816121a5565b965060208801356123a3816121a5565b95506040880135945060608801359350608088013560ff811681146123c757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561244357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a7e57610a7e61244a565b60006020828403121561248557600080fd5b8151612088816121a5565b634e487b7160e01b600052601260045260246000fd5b6000826124b5576124b5612490565b500490565b6000600182016124cc576124cc61244a565b5060010190565b600082516124e5818460208701612253565b9190910192915050565b60006020828403121561250157600080fd5b8151801515811461208857600080fd5b8082028115828204841417610a7e57610a7e61244a565b60008261253757612537612490565b500690565b63ffffffff8281168282160390808211156125595761255961244a565b5092915050565b80820180821115610a7e57610a7e61244a565b6001600160e01b0382811682821681810283169291811582850482141761259c5761259c61244a565b50505092915050565b60006001600160e01b03808416806125bf576125bf612490565b9216919091049291505056fea2646970667358221220548110e38619ce07d7fce254e00d552eab90717b905563e24203ef2f636a4ef564736f6c63430008140033a2646970667358221220f90b91a64b0329928e1b01aa8df4e42a3784583371c8c4da16cbdf6234628bd964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80637cd07e4711610081578063c9c653961161005b578063c9c6539614610179578063e6a439051461018c578063f46901ed146101c057600080fd5b80637cd07e471461014b5780639aab92481461015e578063a2e74af61461016657600080fd5b80631e3dd18b116100b25780631e3dd18b1461011157806323cf311814610124578063574f2ba31461013957600080fd5b8063017e7e58146100ce578063094b7415146100fe575b600080fd5b6000546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100e1906001600160a01b031681565b6100e161011f366004610707565b6101d3565b61013761013236600461073c565b6101fd565b005b6004545b6040519081526020016100f5565b6002546100e1906001600160a01b031681565b61013d61028b565b61013761017436600461073c565b6102bd565b6100e161018736600461075e565b610346565b6100e161019a36600461075e565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6101376101ce36600461073c565b610671565b600481815481106101e357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461025c5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e00000000000000000000000060448201526064015b60405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006040518060200161029d906106fa565b6020820181038252601f19601f8201166040525080519060200120905090565b6001546001600160a01b031633146103175760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e0000000000000000000000006044820152606401610253565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316036103a95760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f41444452455353455300006044820152606401610253565b600080836001600160a01b0316856001600160a01b0316106103cc5783856103cf565b84845b90925090506001600160a01b03821661042a5760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f414444524553530000000000000000006044820152606401610253565b6001600160a01b0382811660009081526003602090815260408083208585168452909152902054161561049f5760405162461bcd60e51b815260206004820152601660248201527f556e697377617056323a20504149525f455849535453000000000000000000006044820152606401610253565b6000604051806020016104b1906106fa565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f56040517f485cc9550000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146106cb5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e0000000000000000000000006044820152606401610253565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6127118061079283390190565b60006020828403121561071957600080fd5b5035919050565b80356001600160a01b038116811461073757600080fd5b919050565b60006020828403121561074e57600080fd5b61075782610720565b9392505050565b6000806040838503121561077157600080fd5b61077a83610720565b915061078860208401610720565b9050925092905056fe60806040526001600c5534801561001557600080fd5b50604080518082018252601281527129bab9b434a9bbb0b8102628102a37b5b2b760711b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fefbffe65652a145845c9bc8d0532945be6b9830fe1e9966c887bd298e551ac83818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055612601806101106000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610449578063d505accf1461045c578063dd62ed3e1461046f578063fff6cae91461049a57600080fd5b8063ba9a7a561461041a578063bc25cf7714610423578063c45a01551461043657600080fd5b80637ecebe00116100d35780637ecebe001461038357806389afcb44146103a357806395d89b41146103cb578063a9059cbb1461040757600080fd5b80636a6278421461034757806370a082311461035a5780637464fc3d1461037a57600080fd5b806323b872dd116101665780633644e515116101405780633644e51514610319578063485cc955146103225780635909c0d5146103355780635a3d54931461033e57600080fd5b806323b872dd146102c557806330adf81f146102d8578063313ce567146102ff57600080fd5b8063095ea7b311610197578063095ea7b3146102605780630dfe16811461028357806318160ddd146102ae57600080fd5b8063022c0d9f146101be57806306fdde03146101d35780630902f1ac14610225575b600080fd5b6101d16101cc3660046121bd565b6104a2565b005b61020f6040518060400160405280601281526020017f537573686953776170204c5020546f6b656e000000000000000000000000000081525081565b60405161021c9190612277565b60405180910390f35b600854604080516001600160701b038084168252600160701b8404166020820152600160e01b90920463ffffffff169082015260600161021c565b61027361026e3660046122aa565b610a6d565b604051901515815260200161021c565b600654610296906001600160a01b031681565b6040516001600160a01b03909116815260200161021c565b6102b760005481565b60405190815260200161021c565b6102736102d33660046122d6565b610a84565b6102b77f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610307601281565b60405160ff909116815260200161021c565b6102b760035481565b6101d1610330366004612317565b610b18565b6102b760095481565b6102b7600a5481565b6102b7610355366004612350565b610bb8565b6102b7610368366004612350565b60016020526000908152604090205481565b6102b7600b5481565b6102b7610391366004612350565b60046020526000908152604090205481565b6103b66103b1366004612350565b61107d565b6040805192835260208301919091520161021c565b61020f6040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102736104153660046122aa565b61142c565b6102b76103e881565b6101d1610431366004612350565b611439565b600554610296906001600160a01b031681565b600754610296906001600160a01b031681565b6101d161046a36600461236d565b611571565b6102b761047d366004612317565b600260209081526000928352604080842090915290825290205481565b6101d16117ab565b600c546001146104ed5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064015b60405180910390fd5b6000600c55841515806105005750600084115b6105725760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f4160448201527f4d4f554e5400000000000000000000000000000000000000000000000000000060648201526084016104e4565b6000806105a36008546001600160701b0380821692600160701b83049091169163ffffffff600160e01b9091041690565b5091509150816001600160701b0316871080156105c85750806001600160701b031686105b61063a5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f590000000000000000000000000000000000000000000000000000000000000060648201526084016104e4565b60065460075460009182916001600160a01b039182169190811690891682148015906106785750806001600160a01b0316896001600160a01b031614155b6106c45760405162461bcd60e51b815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f000000000000000000000060448201526064016104e4565b8a156106d5576106d5828a8d6118f3565b89156106e6576106e6818a8c6118f3565b861561076c576040517f10d1e85c0000000000000000000000000000000000000000000000000000000081526001600160a01b038a16906310d1e85c906107399033908f908f908e908e906004016123e4565b600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190612431565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190612431565b92505050600089856001600160701b031661085a9190612460565b8311610867576000610884565b61087a8a6001600160701b038716612460565b6108849084612460565b9050600061089b8a6001600160701b038716612460565b83116108a85760006108c5565b6108bb8a6001600160701b038716612460565b6108c59084612460565b905060008211806108d65750600081115b6109475760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201527f4f554e540000000000000000000000000000000000000000000000000000000060648201526084016104e4565b6000610969610957846003611a57565b610963876103e8611a57565b90611ac7565b9050600061097b610957846003611a57565b90506109a0620f424061099a6001600160701b038b8116908b16611a57565b90611a57565b6109aa8383611a57565b10156109f85760405162461bcd60e51b815260206004820152600c60248201527f556e697377617056323a204b000000000000000000000000000000000000000060448201526064016104e4565b5050610a0684848888611b25565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6000610a7a338484611d33565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610b03576001600160a01b0384166000908152600260209081526040808320338452909152902054610ade9083611ac7565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610b0e848484611d95565b5060019392505050565b6005546001600160a01b03163314610b725760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e00000000000000000000000060448201526064016104e4565b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b6000600c54600114610c005760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c819055600854600654604080516370a0823160e01b815230600482015290516001600160701b0380851695600160701b9095041693926001600160a01b0316916370a082319160248083019260209291908290030181865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190612431565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d049190612431565b90506000610d1b836001600160701b038716611ac7565b90506000610d32836001600160701b038716611ac7565b90506000610d408787611e3b565b60008054919250819003610f3257600554604080517f7cd07e4700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691637cd07e479160048083019260209291908290030181865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190612473565b90506001600160a01b0381163303610eae57806001600160a01b03166340dc0e376040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190612431565b995060008a118015610e5d57506000198a14155b610ea95760405162461bcd60e51b815260206004820152601560248201527f4261642064657369726564206c6971756964697479000000000000000000000060448201526064016104e4565b610f2c565b6001600160a01b03811615610f055760405162461bcd60e51b815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f720000000000000000000060448201526064016104e4565b610f1d6103e8610963610f188888611a57565b611f78565b9950610f2c60006103e8611fe8565b50610f79565b610f766001600160701b038916610f498684611a57565b610f5391906124a6565b6001600160701b038916610f678685611a57565b610f7191906124a6565b612077565b98505b60008911610fef5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4d494e54454400000000000000000000000000000000000000000000000060648201526084016104e4565b610ff98a8a611fe8565b61100586868a8a611b25565b811561102f5760085461102b906001600160701b0380821691600160701b900416611a57565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c546001146110c65760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c819055600854600654600754604080516370a0823160e01b815230600482015290516001600160701b0380861696600160701b90960416946001600160a01b0394851694909316929184916370a08231916024808201926020929091908290030181865afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190612431565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612431565b306000908152600160205260408120549192506111ef8888611e3b565b600054909150806112008487611a57565b61120a91906124a6565b9a50806112178486611a57565b61122191906124a6565b995060008b118015611233575060008a115b6112a55760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4255524e454400000000000000000000000000000000000000000000000060648201526084016104e4565b6112af308461208f565b6112ba878d8d6118f3565b6112c5868d8c6118f3565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190612431565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113989190612431565b93506113a685858b8b611b25565b81156113d0576008546113cc906001600160701b0380821691600160701b900416611a57565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b6000610a7a338484611d95565b600c5460011461147f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b03938416939092169161151a9184918691611515916001600160701b039091169084906370a08231906024015b602060405180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612431565b6118f3565b6008546040516370a0823160e01b8152306004820152611567918391869161151591600160701b9091046001600160701b0316906001600160a01b038516906370a08231906024016114d4565b50506001600c5550565b428410156115c15760405162461bcd60e51b815260206004820152601260248201527f556e697377617056323a2045585049524544000000000000000000000000000060448201526064016104e4565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b919087611614836124ba565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016116a89291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611713573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117495750886001600160a01b0316816001600160a01b0316145b6117955760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e41545552450000000060448201526064016104e4565b6117a0898989611d33565b505050505050505050565b600c546001146117f15760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064016104e4565b6000600c556006546040516370a0823160e01b81523060048201526118ec916001600160a01b0316906370a0823190602401602060405180830381865afa158015611840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118649190612431565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d09190612431565b6008546001600160701b0380821691600160701b900416611b25565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839287169161199891906124d3565b6000604051808303816000865af19150503d80600081146119d5576040519150601f19603f3d011682016040523d82523d6000602084013e6119da565b606091505b5091509150818015611a04575080511580611a04575080806020019051810190611a0491906124ef565b611a505760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c454400000000000060448201526064016104e4565b5050505050565b6000811580611a7b57508282611a6d8183612511565b9250611a7990836124a6565b145b610a7e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f7700000000000000000000000060448201526064016104e4565b600082611ad48382612460565b9150811115610a7e5760405162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000060448201526064016104e4565b6001600160701b038411801590611b4357506001600160701b038311155b611b8f5760405162461bcd60e51b815260206004820152601360248201527f556e697377617056323a204f564552464c4f570000000000000000000000000060448201526064016104e4565b6000611ba064010000000042612528565b600854909150600090611bc090600160e01b900463ffffffff168361253c565b905060008163ffffffff16118015611be057506001600160701b03841615155b8015611bf457506001600160701b03831615155b15611c83578063ffffffff16611c1c85611c0d86612119565b6001600160e01b031690612132565b6001600160e01b0316611c2f9190612511565b60096000828254611c409190612560565b909155505063ffffffff8116611c5984611c0d87612119565b6001600160e01b0316611c6c9190612511565b600a6000828254611c7d9190612560565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081027fffffffff000000000000000000000000000000000000000000000000000000009095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611db89082611ac7565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611de79082612147565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611d889085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190612473565b600b546001600160a01b038216158015945091925090611f64578015611f5f576000611ef0610f186001600160701b03888116908816611a57565b90506000611efd83611f78565b905080821115611f5c576000611f1f611f168484611ac7565b60005490611a57565b90506000611f3883611f32866005611a57565b90612147565b90506000611f4682846124a6565b90508015611f5857611f588782611fe8565b5050505b50505b611f70565b8015611f70576000600b555b505092915050565b60006003821115611fd95750806000611f926002836124a6565b611f9d906001612560565b90505b81811015611fd357905080600281611fb881866124a6565b611fc29190612560565b611fcc91906124a6565b9050611fa0565b50919050565b8115611fe3575060015b919050565b600054611ff59082612147565b60009081556001600160a01b03831681526001602052604090205461201a9082612147565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061206b9085815260200190565b60405180910390a35050565b60008183106120865781612088565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546120b29082611ac7565b6001600160a01b038316600090815260016020526040812091909155546120d99082611ac7565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161206b565b6000610a7e600160701b6001600160701b038416612573565b60006120886001600160701b038316846125a5565b6000826121548382612560565b9150811015610a7e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016104e4565b6001600160a01b03811681146121ba57600080fd5b50565b6000806000806000608086880312156121d557600080fd5b853594506020860135935060408601356121ee816121a5565b9250606086013567ffffffffffffffff8082111561220b57600080fd5b818801915088601f83011261221f57600080fd5b81358181111561222e57600080fd5b89602082850101111561224057600080fd5b9699959850939650602001949392505050565b60005b8381101561226e578181015183820152602001612256565b50506000910152565b6020815260008251806020840152612296816040850160208701612253565b601f01601f19169190910160400192915050565b600080604083850312156122bd57600080fd5b82356122c8816121a5565b946020939093013593505050565b6000806000606084860312156122eb57600080fd5b83356122f6816121a5565b92506020840135612306816121a5565b929592945050506040919091013590565b6000806040838503121561232a57600080fd5b8235612335816121a5565b91506020830135612345816121a5565b809150509250929050565b60006020828403121561236257600080fd5b8135612088816121a5565b600080600080600080600060e0888a03121561238857600080fd5b8735612393816121a5565b965060208801356123a3816121a5565b95506040880135945060608801359350608088013560ff811681146123c757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561244357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a7e57610a7e61244a565b60006020828403121561248557600080fd5b8151612088816121a5565b634e487b7160e01b600052601260045260246000fd5b6000826124b5576124b5612490565b500490565b6000600182016124cc576124cc61244a565b5060010190565b600082516124e5818460208701612253565b9190910192915050565b60006020828403121561250157600080fd5b8151801515811461208857600080fd5b8082028115828204841417610a7e57610a7e61244a565b60008261253757612537612490565b500690565b63ffffffff8281168282160390808211156125595761255961244a565b5092915050565b80820180821115610a7e57610a7e61244a565b6001600160e01b0382811682821681810283169291811582850482141761259c5761259c61244a565b50505092915050565b60006001600160e01b03808416806125bf576125bf612490565b9216919091049291505056fea2646970667358221220548110e38619ce07d7fce254e00d552eab90717b905563e24203ef2f636a4ef564736f6c63430008140033a2646970667358221220f90b91a64b0329928e1b01aa8df4e42a3784583371c8c4da16cbdf6234628bd964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13870,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13873,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13876,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13883,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 13887,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}